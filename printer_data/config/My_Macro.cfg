#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  
#####################################################################
[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    HotEnd_Rainbow
    G90
    G28
    CLEAN_NOZZLE_FAST
    G28 Z
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
#####################################################################   
[gcode_macro Print_StartCura]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
###Cura####
gcode:   
    SFS_DISABLE
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    # {% set chambertemp = params.CHAMBER|default(0)|int %}
    
    G32                            ; home all axes
    G90    
    BED_MESH_PROFILE LOAD=default; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
    M190 S{bedtemp}                                                              ; set & wait for bed temp
    # TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}   ; wait for chamber temp
    M109 S{hotendtemp}    ; set & wait for hotend temp
    SFS_ENABLE
    
#####################################################################
[gcode_macro PRINT_START]
####Prusa####
gcode:
    SFS_DISABLE
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    # Heat nozzle for probing
    M104 S150
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G32
    LightOn_Rainbow
    BED_MESH_CLEAR
    # SET_DISPLAY_TEXT MSG="Bed Mesh"
    # BED_MESH_CALIBRATE

    # If you are using QGL:
    # QUAD_GANTRY_LEVEL
    # G28 Z

    # If you are using Z-Tilt:
    #Z_TILT_ADJUST

    # If you are generating a new bed mesh:
    BED_MESH_CALIBRATE ADAPTIVE=1
    #BED_MESH_CALIBRATE
    ## NOTE:    The adaptive meshing feature requires exclude_object     ##
    ##      and may require 'Label Objects' to be enabled in the slicer  ##
    ##           To mesh without it just use BED_MESH_CALIBRATE          ##

    # If you are loading an existing mesh:
    #BED_MESH_PROFILE LOAD=default

    # Move the nozzle near the bed
    G1 Z5 F3000
    LightOff_Rainbow
    HotEnd_RainbowOff
    SET_LED LED=board_rgb RED=1 BLUE=1 GREEN=1
    # Set and wait for nozzle to reach printing temperature
    M109 S{EXTRUDER_TEMP}
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=0 WHITE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=2 TRANSMIT=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=3 TRANSMIT=1
    SFS_ENABLE
    # Start printing!



   
#####################################################################
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    SFS_DISABLE

#####################################################################   
#load filament
#####################################################################   

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  35
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

#unload filament

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

####################################################################   
#Misc
####################################################################   

[gcode_macro Filament_Resume]
gcode:
    ET_LED LED=board_rgb RED=1 BLUE=1 GREEN=1 TRANSMIT=1
    RESUME

[gcode_macro M0]
gcode:
    ET_LED LED=board_rgb RED=1 BLUE=0 GREEN=0 TRANSMIT=1
    PAUSE

[gcode_macro M600]
variable_park_x: 175
variable_park_y: 10
variable_z_lift: 10
variable_velocity: 60
variable_retract: 1
gcode:
    # {% set X = params.X|default(50)|float %}
    # {% set Y = params.Y|default(0)|float %}
    # {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=STATE_M600
    
    PAUSE_BASE
    {% set th = printer.toolhead %}
    {% set park_x = [params.X|default(park_x)|int, th.axis_maximum.x-2]|min %}
    {% set park_y = [params.Y|default(park_y)|int, th.axis_maximum.y-10]|min %}
    {% set park_z = [th.position.z + params.Z_LIFT|default(z_lift)|int, th.axis_maximum.z]|min %}
    {% set park_feedrate = params.Velocity|default(velocity)|int *60 %}

    
    SET_LED LED=board_rgb RED=1 BLUE=0 GREEN=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=0 WHITE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=0 BLUE=0 WHITE=1 INDEX=2 TRANSMIT=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=0 BLUE=0 WHITE=1 INDEX=3 TRANSMIT=1
    G91
    G1 E-{retract} F3000
    G90
    G0 X{park_x} 
    G0 Y{park_y} 
    G0 Z{park_z} F{park_feedrate}
    G91
    M117 Reload Filament
    RESTORE_GCODE_STATE NAME=STATE_M600
    SFS_ENABLE

[gcode_macro Input_Shaper]
gcode:
    LightOn_Rainbow
    HotEnd_Rainbow
    G28
    SHAPER_CALIBRATE
    LightOff_Rainbow
    HotEnd_RainbowOff
    SET_LED LED=board_rgb RED=1 BLUE=1 GREEN=1
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=0 WHITE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=2 TRANSMIT=0
    SET_LED LED=HotEnd_Lights RED=1 GREEN=1 BLUE=1 WHITE=1 INDEX=3 TRANSMIT=1


    

