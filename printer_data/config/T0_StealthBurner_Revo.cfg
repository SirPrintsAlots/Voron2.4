# This file contains common pin mappings for the BIGTREETECH EBBCan
# Canbus board. To use this config, the firmware should be compiled for the
# RP2040 with "USB" or "CAN bus (on gpio4/gpio5)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu EBBCan0]
#serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
canbus_uuid: abb7dbbeac38

[temperature_sensor T0_SB2209]
sensor_type: Generic 3950
sensor_pin: EBBCan0:gpio28

#[resonance_tester]
#probe_points: 175, 175, 20
#accel_chip: adxl345


#####################################################################
#   Extruder
#####################################################################

##  Connected to MOTOR_6
##  Heater - HE0
##  Thermistor - T0
[extruder] 
step_pin: EBBCan0:gpio18
dir_pin: !EBBCan0:gpio19
enable_pin: !EBBCan0:gpio17

##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.6789511   #Bondtech 5mm Drive Gears
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75

heater_pin: EBBCan0:gpio7

sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: EBBCan0:gpio27
min_temp: -273.15
max_temp: 375
max_power: 1.0
min_extrude_temp: 0
control = pid
pid_Kp=28.946
pid_Ki=2.680
pid_Kd=78.152
##  Try to keep pressure_advance below 1.0
pressure_advance: 0.05
##  Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##  E0 on MOTOR6
##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
# uart_pin: PE1
uart_pin: EBBCan0:gpio20
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0

###############################################################################
## 

[adxl345]
cs_pin: EBBCan0:gpio1
#   The SPI enable pin for the sensor. This parameter must be provided.
spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
spi_software_sclk_pin: EBBCan0:gpio2
spi_software_mosi_pin: EBBCan0:gpio0
spi_software_miso_pin: EBBCan0:gpio3
#   See the "common SPI settings" section for a description of the
#   above parameters.
axes_map: x, y, z
#   The accelerometer axis for each of the printer's X, Y, and Z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y, x, z" to swap the X and Y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x, z, -y"). The default is "x, y, z".
rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.

###############################################################################
## NeoPixel
###############################################################################
[neopixel HotEnd_Lights]
pin: EBBCan0:gpio16

#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count:3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
#color_order: GRB
color_order: GRBW
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0
#   See the "led" section for information on these parameters.

###############################################################################
## Fans
###############################################################################


## SB2040 fan pmw 
[heater_fan T0_SB2040_Fan]
pin: EBBCan0:gpio15
heater: extruder
max_power: 1.0
heater_temp: 50.0
shutdown_speed: 0.0
kick_start_time: 5.0

##  Print Cooling Fan - FAN0
[fan_generic T0_partfan]
pin: EBBCan0:gpio13
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10


##  Hotend Fan - FAN1
[heater_fan T0_hotend_fan]
# pin: PE5
pin: EBBCan0:gpio14
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

#Change tool number if needed in the next line, as well ast the last line
[gcode_macro T0]
variable_color: ""
gcode:
  SELECT_TOOL T=0

#change the tool numbers to the tool you are configuring, ie T0, T1, etc
[tool T0]
#change this too
tool_number: 0
#if this were T1, then this would be extruder1, etc
extruder: extruder
#Change T0_partfan to tool number
fan: fan_generic T0_partfan
gcode_x_offset: 0
gcode_y_offset: 0
gcode_z_offset: 0
params_type: 'sc'
#This is the path the tool change takes. Shouldn't have to change it. Unless
#you are using a custom dock
params_sc_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
#These are build specific, its where the tool is sititng in it's dock.
params_park_x: 1.80
params_park_y: 35.60
params_park_z: 321.70
#params_safe_y: 190 # now under toolchanger.cfg
# For InputShaper run per tool and enter the frequency here
params_input_shaper_type_x: 'mzv'
params_input_shaper_freq_x: 62.2
params_input_shaper_damping_ratio_x: 0.1
params_input_shaper_type_y: 'mzv'
params_input_shaper_freq_y: 30.0
params_input_shaper_damping_ratio_y: 0.1

# Change tool number if needed
[tool_probe T0]
pin: ^EBBCan0:gpio22
tool: 0
x_offset: 0 # X axis-sensor relative nozzle offset
y_offset: 0 # Y axis-sensor relative nozzle offset
z_offset: -1.020 # Z axis-sensor relative nozzle offset -.99
# drop_first_result: True # enable is on danger-klipper
speed: 5.0
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.02
samples_tolerance_retries: 3
activate_gcode:
    _TAP_PROBE_ACTIVATE HEATER=extruder
# #####################################################################
# #   Probe
# #####################################################################

# ##  Inductive Probe
# ##  This probe is not used for Z height, only Quad Gantry Leveling
# [probe]

# activate_gcode:
#     {% set PROBE_TEMP = 150 %}
#     {% set MAX_TEMP = PROBE_TEMP + 5 %}
#     {% set ACTUAL_TEMP = printer.extruder.temperature %}
#     {% set TARGET_TEMP = printer.extruder.target %}

#     {% if TARGET_TEMP > PROBE_TEMP %}
#         { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
#         M109 S{ PROBE_TEMP }
#     {% else %}
#         # Temperature target is already low enough, but nozzle may still be too hot.
#         {% if ACTUAL_TEMP > MAX_TEMP %}
#             { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
#             TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
#         {% endif %}
#     {% endif %}

# #--------------------------------------------------------------------

# ## Select the probe port by type:
# ## For the PROBE port. Will not work with Diode. May need pull-up resistor from signal to 24V.
# #pin: ~!PB7
# ## For the DIAG_7 port. NEEDS BAT85 DIODE! Change to !PG15 if probe is NO.
# pin: ^EBBCan:gpio22 
# # pin: PG15
# ## For Octopus Pro PROBE port; NPN and PNP proximity switch types can be set by jumper
# #pin: ~!PC5

# #--------------------------------------------------------------------

# x_offset: 0
# y_offset: 0
# z_offset: 0
# speed: 10.0
# samples: 3
# samples_result: median
# sample_retract_dist: 3.0
# samples_tolerance: 0.006
# samples_tolerance_retries: 5